package vistas;

import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.ControlCategorias;
import negocio.ControlProductos;
import negocio.ControlProveedores;
import objetosNegocio.Categoria;
import objetosNegocio.Producto;
import objetosNegocio.Proveedor;

/**
 *
 * @author MartinBernal
 */
public class FrmProductos extends javax.swing.JFrame {

    private final ControlProductos controlProductos = new ControlProductos();
    private final ControlProveedores controlProveedores = new ControlProveedores();
    private final ControlCategorias controlCategorias = new ControlCategorias();

    /**
     * Creates new form FrmProductos
     */
    public FrmProductos() throws SQLException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Productos.png")).getImage());
        this.cargarCategorias();
        this.cargarProductos();
        this.cargarProveedores();
        this.limpiarFormulario();
        this.ocultarErrores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblCategoria = new javax.swing.JLabel();
        lblCodBarras = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblProveedor = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtCodBarras = new javax.swing.JTextField();
        cboxCategoria = new javax.swing.JComboBox<>();
        lblStock = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        paneTablaEmpleados = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblErrorCategoria = new javax.swing.JLabel();
        lblErrorStock = new javax.swing.JLabel();
        lblErrorProveedor = new javax.swing.JLabel();
        lblImagen1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblErrorCodBarras = new javax.swing.JLabel();
        lblErrorNombre = new javax.swing.JLabel();
        lblPrecioNormal = new javax.swing.JLabel();
        txtPrecioNormal = new javax.swing.JTextField();
        lblErrorPrecioNormal = new javax.swing.JLabel();
        btnGuardar1 = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        cboxProveedor = new javax.swing.JComboBox<>();
        txtID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administración de Productos");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Castellar", 1, 14)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 102, 153));
        lblTitulo.setText("Administración de Productos");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 25, 308, -1));

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Productos.png"))); // NOI18N
        getContentPane().add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 11, -1, 62));

        lblNombre.setText("Nombre:");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, -1, -1));

        lblCategoria.setText("Categoria:");
        getContentPane().add(lblCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, -1, -1));

        lblCodBarras.setText("Codigo de barras:");
        getContentPane().add(lblCodBarras, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 520, 30));

        lblProveedor.setText("Proveedor: ");
        getContentPane().add(lblProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 177, -1));

        txtCodBarras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodBarrasActionPerformed(evt);
            }
        });
        txtCodBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodBarrasKeyTyped(evt);
            }
        });
        getContentPane().add(txtCodBarras, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 130, -1));

        cboxCategoria.setForeground(new java.awt.Color(0, 102, 153));
        cboxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione 1" }));
        getContentPane().add(cboxCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 130, -1));

        lblStock.setText("Stock:");
        getContentPane().add(lblStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, -1, -1));

        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockKeyTyped(evt);
            }
        });
        getContentPane().add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, 70, -1));

        tableProductos.setBackground(new java.awt.Color(0, 102, 153));
        tableProductos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Codigo de Barras", "Nombre", "Precio Normal", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductos.setGridColor(new java.awt.Color(0, 102, 153));
        tableProductos.setSelectionForeground(new java.awt.Color(0, 153, 153));
        paneTablaEmpleados.setViewportView(tableProductos);

        getContentPane().add(paneTablaEmpleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 227, 510, 170));

        btnBuscar.setBackground(new java.awt.Color(0, 102, 153));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, 70, 30));

        btnCancelar.setBackground(new java.awt.Color(0, 102, 153));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, -1, -1));

        btnActualizar.setBackground(new java.awt.Color(0, 102, 153));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 420, -1, -1));

        btnEliminar.setBackground(new java.awt.Color(0, 102, 153));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 420, -1, -1));

        lblErrorCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        getContentPane().add(lblErrorCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, -1, -1));

        lblErrorStock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        getContentPane().add(lblErrorStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, -1, -1));

        lblErrorProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        getContentPane().add(lblErrorProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, -1, -1));

        lblImagen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Productos.png"))); // NOI18N
        getContentPane().add(lblImagen1, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 11, -1, 62));

        jSeparator2.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator2.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 520, 10));

        lblErrorCodBarras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        getContentPane().add(lblErrorCodBarras, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, -1, -1));

        lblErrorNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorNombre.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));

        lblPrecioNormal.setText("Precio:");
        getContentPane().add(lblPrecioNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        txtPrecioNormal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioNormalKeyTyped(evt);
            }
        });
        getContentPane().add(txtPrecioNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 70, -1));

        lblErrorPrecioNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        getContentPane().add(lblErrorPrecioNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, -1, -1));

        btnGuardar1.setBackground(new java.awt.Color(0, 102, 153));
        btnGuardar1.setText("Guardar");
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, -1, -1));

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 280, 30));

        cboxProveedor.setForeground(new java.awt.Color(0, 102, 153));
        cboxProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione 1" }));
        getContentPane().add(cboxProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 130, -1));

        txtID.setEditable(false);
        txtID.setText("1");
        getContentPane().add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoPantalla.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (txtNombre.getText().length() > 50) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtCodBarrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodBarrasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodBarrasActionPerformed

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo puedes ingresar numeros  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        if (txtStock.getText().length() > 6) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtStockKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        try {
            this.limpiarFormulario();
            this.cargarProductos();
            this.cargarCategorias();
            this.cargarProveedores();
            this.ocultarErrores();
        } catch (SQLException ex) {
            Logger.getLogger(FrmProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int fila = this.tableProductos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe selecionar un producto. ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProductos.getModel();
            String codBarras = modelo.getValueAt(fila, 0) + "";
            if (this.txtCodBarras.getText().equalsIgnoreCase(codBarras)) {
                JOptionPane.showMessageDialog(null, "Para terminar la actualización oprima el boton guardar ☺ ", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    this.cargarProducto();
                } catch (SQLException ex) {
                    Logger.getLogger(FrmProductos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            this.eliminarProducto();
        } catch (SQLException ex) {
            Logger.getLogger(FrmProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtPrecioNormalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioNormalKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo puedes ingresar numeros  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        if (txtStock.getText().length() > 6) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtPrecioNormalKeyTyped

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        int idProducto = Integer.parseInt(txtID.getText() + "");
        Producto producto;
        try {
            producto = controlProductos.obtenerPorId(idProducto);

            if (producto == null) {
                this.agregarProducto();
            } else {
                this.actualizarProducto();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            this.cargarProductosBuscar();
        } catch (SQLException ex) {
            Logger.getLogger(FrmProductos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtCodBarrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodBarrasKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo puedes ingresar numeros  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        if (txtStock.getText().length() > 20) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtCodBarrasKeyTyped

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmProductos().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmProductos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void ocultarErrores() {
        this.lblErrorCategoria.setVisible(false);
        this.lblErrorCodBarras.setVisible(false);
        this.lblErrorNombre.setVisible(false);
        this.lblErrorPrecioNormal.setVisible(false);
        this.lblErrorProveedor.setVisible(false);
        this.lblErrorStock.setVisible(false);

        this.txtBuscar.setBackground(Color.white);
        this.txtCodBarras.setBackground(Color.white);
        this.txtNombre.setBackground(Color.white);
        this.txtPrecioNormal.setBackground(Color.white);
        this.txtStock.setBackground(Color.white);
        this.cboxCategoria.setBackground(Color.white);
        this.cboxProveedor.setBackground(Color.white);
    }

    private void limpiarFormulario() throws SQLException {
        this.txtNombre.setText("");
        this.txtBuscar.setText("");
        this.txtCodBarras.setText("");
        this.txtPrecioNormal.setText("");
        this.cboxCategoria.setSelectedIndex(0);
        this.cboxProveedor.setSelectedIndex(0);
        this.txtStock.setText("");
        this.txtID.setVisible(false);
        this.cargarIdProducto();
    }

    private void cargarIdProducto() throws SQLException {
        List<Producto> productos = this.controlProductos.obtenerProductos();
        if (!productos.isEmpty()) {
            Producto producto = productos.get(productos.size() - 1);
            txtID.setText((producto.getId() + 1) + "");
        } else {
            txtID.setText("1");
        }
    }

    private int verificarCampos() throws SQLException {
        int confirmacion = 0;
        if (txtNombre.getText().equalsIgnoreCase("")) {
            lblErrorNombre.setVisible(true);
            txtNombre.setBackground(Color.red);
            confirmacion++;
        }
        if (txtCodBarras.getText().equalsIgnoreCase("")) {
            lblErrorCodBarras.setVisible(true);
            txtCodBarras.setBackground(Color.red);
            confirmacion++;
        }

        if (txtPrecioNormal.getText().equalsIgnoreCase("")) {
            lblErrorPrecioNormal.setVisible(true);
            txtPrecioNormal.setBackground(Color.red);
            confirmacion++;
        }

        if (txtStock.getText().equalsIgnoreCase("")) {
            lblErrorStock.setVisible(true);
            txtStock.setBackground(Color.red);
            confirmacion++;
        }

        if ((cboxCategoria.getSelectedItem() + "").equalsIgnoreCase("Seleccione 1")) {
            lblErrorCategoria.setVisible(true);
            cboxCategoria.setBackground(Color.red);
            confirmacion++;
        }
        if ((cboxProveedor.getSelectedItem() + "").equalsIgnoreCase("Seleccione 1")) {
            lblErrorProveedor.setVisible(true);
            cboxProveedor.setBackground(Color.red);
            confirmacion++;
        }
        if (this.verificaCodBarras(txtCodBarras.getText())) {
            confirmacion++;
            JOptionPane.showMessageDialog(this, "Ya existe un producto con ese codigo de barras ", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return confirmacion;
    }

    private void cargarProductos() throws SQLException {
        List<Producto> productos = this.controlProductos.obtenerProductos();
        if (productos != null) {
            DefaultTableModel modelo
                    = (DefaultTableModel) tableProductos.getModel();
            modelo.setRowCount(0);
            for (Producto producto : productos) {
                modelo.addRow(producto.toArray());
            }
        }
    }

    private void cargarProductosBuscar() throws SQLException {
        int cont = 0;
        DefaultTableModel modelo = (DefaultTableModel) tableProductos.getModel();
        modelo.setRowCount(0);

        List<Producto> productos = this.controlProductos.obtenerProductosNombre(txtBuscar.getText());
        if (productos != null) {
            for (Producto producto : productos) {
                modelo.addRow(producto.toArray());
                cont++;
            }
        }

        if (cont == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron productos  ", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean isNumeric(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    private void cargarProducto() throws SQLException {
        int fila = this.tableProductos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un producto  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProductos.getModel();
            int id = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            Producto producto = controlProductos.obtenerPorId(id);
            this.txtCodBarras.setText(producto.getCodBarras());
            this.txtNombre.setText(producto.getNombre());
            this.txtPrecioNormal.setText(producto.getPrecioActual() + "");
            this.txtStock.setText(producto.getStock() + "");
            this.txtID.setText(producto.getId() + "");
            cboxCategoria.setSelectedItem(producto.getCategoria().toString());
            cboxProveedor.setSelectedItem(producto.getProveedor().toString());
        }
    }

    private void cargarProveedores() throws SQLException {
        List<Proveedor> proveedores = controlProveedores.obtenerProveedores();
        for (Proveedor proveedor : proveedores) {
            cboxProveedor.addItem(proveedor.toString());
        }
    }

    private void cargarCategorias() throws SQLException {
        List<Categoria> categorias = controlCategorias.obtenerCategorias();
        for (Categoria categoria : categorias) {
            cboxCategoria.addItem(categoria.toString());
        }
    }

    private void agregarProducto() throws SQLException {
        this.ocultarErrores();
        if (this.verificarCampos() == 0) {
            Producto producto = new Producto();
            producto.setPrecioActual(Float.parseFloat(txtPrecioNormal.getText()));
            producto.setNombre(txtNombre.getText());
            producto.setCodBarras(txtCodBarras.getText());
            producto.setStock(Float.parseFloat(txtStock.getText()));
            String cadena = cboxCategoria.getSelectedItem() + "";
            String[] palabras = cadena.split(" ");
            producto.setCategoria(controlCategorias.obtenerCategoriaPorId(Integer.parseInt(palabras[0])));
            String cadena2 = cboxProveedor.getSelectedItem() + "";
            String[] palabras2 = cadena2.split(" ");
            producto.setProveedor(controlProveedores.obtenerProveedorPorId(Integer.parseInt(palabras2[0])));
            boolean resp = this.controlProductos.agregarProductoBD(producto);
            if (resp) {
                this.limpiarFormulario();
                this.ocultarErrores();
                this.cargarProductos();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean verificaCodBarras(String codBarras) throws SQLException {
        Producto producto;
        producto = controlProductos.obtenerProductoCodBarras(codBarras);
        if (producto != null) {
            return true;
        } else {
            return false;
        }
    }

    private void eliminarProducto() throws SQLException {
        this.cargarProducto();
        int fila = this.tableProductos.getSelectedRow();
        if (fila == -1) {
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProductos.getModel();
            int id = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            this.controlProductos.eliminarProductoBD(id);
            this.limpiarFormulario();
            this.ocultarErrores();
            this.cargarProductos();
        }
    }

    private void actualizarProducto() throws SQLException {
        int fila = this.tableProductos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un Producto  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            if (this.verificarCampos() == 0) {
                DefaultTableModel modelo = (DefaultTableModel) this.tableProductos.getModel();
                int id = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
                Producto producto = controlProductos.obtenerPorId(id);
                producto.setPrecioActual(Float.parseFloat(txtPrecioNormal.getText()));
                producto.setNombre(txtNombre.getText());
                producto.setCodBarras(txtCodBarras.getText());
                producto.setStock(Float.parseFloat(txtStock.getText()));
                String cadena = cboxCategoria.getSelectedItem() + "";
                String[] palabras = cadena.split(" ");
                producto.setCategoria(controlCategorias.obtenerCategoriaPorId(Integer.parseInt(palabras[0])));
                String cadena2 = cboxProveedor.getSelectedItem() + "";
                String[] palabras2 = cadena2.split(" ");
                producto.setProveedor(controlProveedores.obtenerProveedorPorId(Integer.parseInt(palabras2[0])));
                boolean resp = this.controlProductos.actualizarProductoBD(id, producto);
                if (resp) {
                    this.limpiarFormulario();
                    this.ocultarErrores();
                    this.cargarProductos();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar1;
    private javax.swing.JComboBox<String> cboxCategoria;
    private javax.swing.JComboBox<String> cboxProveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblCodBarras;
    private javax.swing.JLabel lblErrorCategoria;
    private javax.swing.JLabel lblErrorCodBarras;
    private javax.swing.JLabel lblErrorNombre;
    private javax.swing.JLabel lblErrorPrecioNormal;
    private javax.swing.JLabel lblErrorProveedor;
    private javax.swing.JLabel lblErrorStock;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblImagen1;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPrecioNormal;
    private javax.swing.JLabel lblProveedor;
    private javax.swing.JLabel lblStock;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JScrollPane paneTablaEmpleados;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCodBarras;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecioNormal;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
