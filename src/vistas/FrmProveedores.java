package vistas;

import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.ControlProveedores;
import objetosNegocio.Proveedor;

/**
 *
 * @author MartinBernal
 */
public class FrmProveedores extends javax.swing.JFrame {

    private final ControlProveedores controlProveedores = new ControlProveedores();

    /**
     * Creates new form FrmCategorias
     */
    public FrmProveedores() throws SQLException {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Proveedores.png")).getImage());
        this.setLocationRelativeTo(null);
        this.cargarProveedores();
        this.limpiarFormulario();
        this.ocultarErrores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblNumProveedor = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtNombre = new javax.swing.JTextField();
        txtNumProveedor = new javax.swing.JTextField();
        paneTablaEmpleados = new javax.swing.JScrollPane();
        tableProveedores = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblErrorRfc = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblRfc = new javax.swing.JLabel();
        txtRfc = new javax.swing.JTextField();
        lblErrorNombre = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        lblTelefono = new javax.swing.JLabel();
        lblErrorTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administración de Proveedores");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Castellar", 1, 14)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 102, 153));
        lblTitulo.setText("Administración de PROVEEDORES");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 310, -1));

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Proveedores.png"))); // NOI18N
        getContentPane().add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 70, 60));

        lblNombre.setText("Nombre:");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, -1, -1));

        lblNumProveedor.setText("Número de Proveedor:");
        getContentPane().add(lblNumProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 390, 10));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 177, -1));

        txtNumProveedor.setEditable(false);
        txtNumProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumProveedorActionPerformed(evt);
            }
        });
        txtNumProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumProveedorKeyTyped(evt);
            }
        });
        getContentPane().add(txtNumProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 130, -1));

        tableProveedores.setBackground(new java.awt.Color(0, 102, 153));
        tableProveedores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        tableProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero de Proveedor", "RFC", "Nombre", "Telefono"
            }
        ));
        tableProveedores.setGridColor(new java.awt.Color(0, 102, 153));
        tableProveedores.setSelectionForeground(new java.awt.Color(0, 153, 153));
        paneTablaEmpleados.setViewportView(tableProveedores);

        getContentPane().add(paneTablaEmpleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 370, 110));

        btnGuardar.setBackground(new java.awt.Color(0, 102, 153));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));

        btnEliminar.setBackground(new java.awt.Color(0, 102, 153));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, -1, -1));

        lblErrorRfc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorRfc.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, -1, -1));

        jSeparator2.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator2.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 390, 10));

        lblRfc.setText("RFC:");
        getContentPane().add(lblRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtRfc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRfcActionPerformed(evt);
            }
        });
        txtRfc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRfcKeyTyped(evt);
            }
        });
        getContentPane().add(txtRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 240, -1));

        lblErrorNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorNombre.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));

        btnCancelar.setBackground(new java.awt.Color(0, 102, 153));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));

        btnActualizar.setBackground(new java.awt.Color(0, 102, 153));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 320, -1, -1));

        lblTelefono.setText("Telefono:");
        getContentPane().add(lblTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        lblErrorTelefono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorTelefono.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, -1, -1));

        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });
        getContentPane().add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 130, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoPantalla.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 400, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (txtNombre.getText().length() > 50) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtNumProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumProveedorActionPerformed

    }//GEN-LAST:event_txtNumProveedorActionPerformed

    private void txtNumProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumProveedorKeyTyped

    }//GEN-LAST:event_txtNumProveedorKeyTyped

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        int numProveedor = Integer.parseInt(txtNumProveedor.getText() + "");
        Proveedor proveedor;
        try {
            proveedor = controlProveedores.obtenerProveedorPorId(numProveedor);

            if (proveedor == null) {
                this.agregarProveedor();
            } else {
                this.actualizarProveedor();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            this.eliminarProveedor();
        } catch (SQLException ex) {
            Logger.getLogger(FrmProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtRfcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRfcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRfcActionPerformed

    private void txtRfcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRfcKeyTyped
        if (txtNombre.getText().length() > 20) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtRfcKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        try {
            this.limpiarFormulario();
            this.cargarProveedores();
            this.cargarNumProveedor();
            this.ocultarErrores();
        } catch (SQLException ex) {
            Logger.getLogger(FrmProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int fila = this.tableProveedores.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe selecionar un proveedor. ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProveedores.getModel();
            String numCategoria = modelo.getValueAt(fila, 0) + "";
            if (this.txtNumProveedor.getText().equalsIgnoreCase(numCategoria)) {
                JOptionPane.showMessageDialog(null, "Para terminar la actualización oprima el boton guardar ☺ ", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    this.cargarProveedor();
                } catch (SQLException ex) {
                    Logger.getLogger(FrmProveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo puedes ingresar numeros  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        if (txtTelefono.getText().length() > 10) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmProveedores().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmProveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void ocultarErrores() {
        this.lblErrorRfc.setVisible(false);
        this.lblErrorNombre.setVisible(false);
        this.lblErrorTelefono.setVisible(false);
        this.txtRfc.setBackground(Color.white);
        this.txtNombre.setBackground(Color.white);
        this.txtNumProveedor.setBackground(Color.white);
        this.txtTelefono.setBackground(Color.white);
    }

    private void limpiarFormulario() throws SQLException {
        this.txtNombre.setText("");
        this.txtRfc.setText("");
        this.txtTelefono.setText("");
        this.cargarNumProveedor();
    }

    private void cargarNumProveedor() throws SQLException {
        List<Proveedor> proveedores = controlProveedores.obtenerProveedores();
        if (!proveedores.isEmpty()) {
            Proveedor proveedor = proveedores.get(proveedores.size() - 1);
            txtNumProveedor.setText((proveedor.getId() + 1) + "");
        } else {
            txtNumProveedor.setText("1");
        }
    }

    private int verificarCampos() {
        int confirmacion = 0;
        if (txtNombre.getText().equalsIgnoreCase("")) {
            lblErrorNombre.setVisible(true);
            txtNombre.setBackground(Color.red);
            confirmacion++;
        }
        if (txtRfc.getText().equalsIgnoreCase("")) {
            lblErrorRfc.setVisible(true);
            txtRfc.setBackground(Color.red);
            confirmacion++;
        }
        if (txtTelefono.getText().equalsIgnoreCase("")) {
            lblErrorTelefono.setVisible(true);
            txtTelefono.setBackground(Color.red);
            confirmacion++;
        }
        return confirmacion;
    }

    private void agregarProveedor() throws SQLException {
        this.ocultarErrores();
        if (this.verificarCampos() == 0) {
            Proveedor proveedor = new Proveedor();
            proveedor.setNombre(txtNombre.getText());
            proveedor.setRfc(txtRfc.getText());
            proveedor.setTelefono(txtTelefono.getText());
            boolean resp = this.controlProveedores.guardarProveedorBD(proveedor);
            if (resp) {
                this.limpiarFormulario();
                this.ocultarErrores();
                this.cargarProveedores();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void cargarProveedores() throws SQLException {
        List<Proveedor> proveedores = this.controlProveedores.obtenerProveedores();
        if (proveedores != null) {
            DefaultTableModel modelo
                    = (DefaultTableModel) tableProveedores.getModel();
            modelo.setRowCount(0);
            for (Proveedor proveedor : proveedores) {
                modelo.addRow(proveedor.toArray());
            }
        }
    }

    private void cargarProveedor() throws SQLException {
        int fila = this.tableProveedores.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un proveedor  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProveedores.getModel();
            int numProveedor = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            Proveedor proveedor = controlProveedores.obtenerProveedorPorId(numProveedor);
            this.txtNombre.setText(proveedor.getNombre());
            this.txtRfc.setText(proveedor.getRfc());
            this.txtTelefono.setText(proveedor.getTelefono());
            txtNumProveedor.setText(proveedor.getId()+"");
                    
        }
    }

    private void eliminarProveedor() throws SQLException {
        this.cargarProveedor();
        int fila = this.tableProveedores.getSelectedRow();
        if (fila == -1) {
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableProveedores.getModel();
            int numProveedor = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            this.controlProveedores.eliminarProveedorBD(numProveedor);
        }
        this.limpiarFormulario();
        this.ocultarErrores();
        this.cargarProveedores();
    }

    private void actualizarProveedor() throws SQLException {
        int fila = this.tableProveedores.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar un proveedor  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            if (this.verificarCampos() == 0) {
                DefaultTableModel modelo = (DefaultTableModel) this.tableProveedores.getModel();
                int numProveedor = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
                Proveedor proveedor = controlProveedores.obtenerProveedorPorId(numProveedor);
                proveedor.setNombre(txtNombre.getText());
                proveedor.setRfc(txtRfc.getText());
                proveedor.setTelefono(txtTelefono.getText());
                boolean resp = this.controlProveedores.actualizarProveedorBD(proveedor);
                if (resp) {
                    this.limpiarFormulario();
                    this.ocultarErrores();
                    this.cargarProveedores();
                } else {
                    JOptionPane.showMessageDialog(null, "Operacion Cancelada ", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblErrorNombre;
    private javax.swing.JLabel lblErrorRfc;
    private javax.swing.JLabel lblErrorTelefono;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNumProveedor;
    private javax.swing.JLabel lblRfc;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JScrollPane paneTablaEmpleados;
    private javax.swing.JTable tableProveedores;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumProveedor;
    private javax.swing.JTextField txtRfc;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
