package vistas;

import java.awt.Color;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.ControlCategorias;
import objetosNegocio.Categoria;

/**
 *
 * @author MartinBernal
 */
public class FrmCategorias extends javax.swing.JFrame {
    
    private final ControlCategorias controlCategorias = new ControlCategorias();

    /**
     * Creates new form FrmCategorias
     */
    public FrmCategorias() throws SQLException {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/Categorias.png")).getImage());
        this.setLocationRelativeTo(null);
        this.cargarCategorias();
        this.limpiarFormulario();
        this.ocultarErrores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblNumCategoria = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtNombre = new javax.swing.JTextField();
        txtNumCategoria = new javax.swing.JTextField();
        paneTablaEmpleados = new javax.swing.JScrollPane();
        tableCategorias = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblErrorDescripcion = new javax.swing.JLabel();
        lblImagen1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblDescripcion = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblErrorNombre = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administración de Categorias");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitulo.setFont(new java.awt.Font("Castellar", 1, 14)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 102, 153));
        lblTitulo.setText("Administración de CATEGORIAS");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 308, -1));

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Categorias.png"))); // NOI18N
        getContentPane().add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 62));

        lblNombre.setText("Nombre:");
        getContentPane().add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, -1, -1));

        lblNumCategoria.setText("Número de Categoria:");
        getContentPane().add(lblNumCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 470, 10));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 177, -1));

        txtNumCategoria.setEditable(false);
        txtNumCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCategoriaActionPerformed(evt);
            }
        });
        txtNumCategoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumCategoriaKeyTyped(evt);
            }
        });
        getContentPane().add(txtNumCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 130, -1));

        tableCategorias.setBackground(new java.awt.Color(0, 102, 153));
        tableCategorias.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        tableCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de Categoria", "Nombre", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableCategorias.setGridColor(new java.awt.Color(0, 102, 153));
        tableCategorias.setSelectionForeground(new java.awt.Color(0, 153, 153));
        paneTablaEmpleados.setViewportView(tableCategorias);

        getContentPane().add(paneTablaEmpleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 450, 127));

        btnGuardar.setBackground(new java.awt.Color(0, 102, 153));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, -1, -1));

        btnEliminar.setBackground(new java.awt.Color(0, 102, 153));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 320, -1, -1));

        lblErrorDescripcion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorDescripcion.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, -1, -1));

        lblImagen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Categorias.png"))); // NOI18N
        getContentPane().add(lblImagen1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, 62));

        jSeparator2.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator2.setForeground(new java.awt.Color(0, 102, 153));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 470, 10));

        lblDescripcion.setText("Descripción:");
        getContentPane().add(lblDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        txtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescripcionKeyTyped(evt);
            }
        });
        getContentPane().add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 240, -1));

        lblErrorNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ErrorDeCampo.jpg"))); // NOI18N
        lblErrorNombre.setRequestFocusEnabled(false);
        getContentPane().add(lblErrorNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, -1));

        btnCancelar.setBackground(new java.awt.Color(0, 102, 153));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, -1, -1));

        btnActualizar.setBackground(new java.awt.Color(0, 102, 153));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoPantalla.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, -6, 480, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (txtNombre.getText().length() > 50) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtNumCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumCategoriaActionPerformed

    private void txtNumCategoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumCategoriaKeyTyped

    }//GEN-LAST:event_txtNumCategoriaKeyTyped

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        int numCategoria = Integer.parseInt(txtNumCategoria.getText() + "");
        Categoria categoria;
        try {
            categoria = this.controlCategorias.obtenerCategoriaPorId(numCategoria);
            if (categoria == null) {
                this.agregarCategoria();
            } else {
                this.actualizarCategoria();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            this.eliminarCategoria();
        } catch (SQLException ex) {
            Logger.getLogger(FrmCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void txtDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionKeyTyped
        if (txtNombre.getText().length() > 150) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Excedió el número máximo de caracteres  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtDescripcionKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        try {
            this.limpiarFormulario();
            this.cargarCategorias();
            this.cargarNumCategoria();
            this.ocultarErrores();
        } catch (SQLException ex) {
            Logger.getLogger(FrmCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int fila = this.tableCategorias.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe selecionar una categoria. ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableCategorias.getModel();
            String numCategoria = modelo.getValueAt(fila, 0) + "";
            if (this.txtNumCategoria.getText().equalsIgnoreCase(numCategoria)) {
                JOptionPane.showMessageDialog(null, "Para terminar la actualización oprima el boton guardar ☺ ", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    this.cargarCategoria();
                } catch (SQLException ex) {
                    Logger.getLogger(FrmCategorias.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCategorias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmCategorias().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmCategorias.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    private void ocultarErrores() {
        this.lblErrorDescripcion.setVisible(false);
        this.lblErrorNombre.setVisible(false);
        this.txtDescripcion.setBackground(Color.white);
        this.txtNombre.setBackground(Color.white);
        this.txtNumCategoria.setBackground(Color.white);
    }
    
    private void limpiarFormulario() throws SQLException {
        this.txtNombre.setText("");
        this.txtDescripcion.setText("");
        this.cargarNumCategoria();
    }
    
    private void cargarNumCategoria() throws SQLException {
        List<Categoria> categorias = controlCategorias.obtenerCategorias();
        if (!categorias.isEmpty()) {
            Categoria categoria = categorias.get(categorias.size() - 1);
            txtNumCategoria.setText((categoria.getId() + 1) + "");
        } else {
            txtNumCategoria.setText("1");
        }
    }
    
    private int verificarCampos() {
        int confirmacion = 0;
        if (txtNombre.getText().equalsIgnoreCase("")) {
            lblErrorNombre.setVisible(true);
            txtNombre.setBackground(Color.red);
            confirmacion++;
        }
        if (txtDescripcion.getText().equalsIgnoreCase("")) {
            lblErrorDescripcion.setVisible(true);
            txtDescripcion.setBackground(Color.red);
            confirmacion++;
        }
        return confirmacion;
    }
    
    private void agregarCategoria() throws SQLException {
        this.ocultarErrores();
        if (this.verificarCampos() == 0) {
            Categoria categoria = new Categoria();
            categoria.setNombre(txtNombre.getText());
            categoria.setDescripcion(txtDescripcion.getText());
            boolean resp = this.controlCategorias.agregarCategoriaBD(categoria);
            if (resp) {
                this.limpiarFormulario();
                this.ocultarErrores();
                this.cargarCategorias();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void cargarCategorias() throws SQLException {
        List<Categoria> categorias = this.controlCategorias.obtenerCategorias();
        if (categorias != null) {
            DefaultTableModel modelo
                    = (DefaultTableModel) tableCategorias.getModel();
            modelo.setRowCount(0);
            for (Categoria categoria : categorias) {
                modelo.addRow(categoria.toArray());
            }
        }
    }
    
    private void cargarCategoria() throws SQLException {
        int fila = this.tableCategorias.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una categoria  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableCategorias.getModel();
            int numCategoria = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            Categoria categoria = controlCategorias.obtenerCategoriaPorId(numCategoria);
            this.txtNombre.setText(categoria.getNombre());
            this.txtDescripcion.setText(categoria.getDescripcion());
            this.txtNumCategoria.setText(categoria.getId() + "");
        }
    }
    
    private void eliminarCategoria() throws SQLException {
        this.cargarCategoria();
        int fila = this.tableCategorias.getSelectedRow();
        if (fila == -1) {
        } else {
            DefaultTableModel modelo = (DefaultTableModel) this.tableCategorias.getModel();
            int numCategoria = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
            this.controlCategorias.eliminarCategoriaBD(numCategoria);
        }
        this.limpiarFormulario();
        this.ocultarErrores();
        this.cargarCategorias();
    }
    
    private void actualizarCategoria() throws SQLException {
        int fila = this.tableCategorias.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar una categoria  ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            if (this.verificarCampos() == 0) {
                DefaultTableModel modelo = (DefaultTableModel) this.tableCategorias.getModel();
                int numCategoria = Integer.parseInt(modelo.getValueAt(fila, 0) + "");
                Categoria categoria = controlCategorias.obtenerCategoriaPorId(numCategoria);
                categoria.setNombre(txtNombre.getText());
                categoria.setDescripcion(txtDescripcion.getText());
                boolean resp = this.controlCategorias.actualizarCategoriaBD(categoria);
                if (resp) {
                    this.limpiarFormulario();
                    this.ocultarErrores();
                    this.cargarCategorias();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se perimiten campos vacios", "Error En Datos", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblErrorDescripcion;
    private javax.swing.JLabel lblErrorNombre;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblImagen1;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNumCategoria;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JScrollPane paneTablaEmpleados;
    private javax.swing.JTable tableCategorias;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumCategoria;
    // End of variables declaration//GEN-END:variables
}
